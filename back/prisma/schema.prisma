// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  credits   Int      @default(10)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Movies {
  id          Int          @id @default(autoincrement())
  title       String
  description String
  releaseDate DateTime
  grade       Float
  image       String?
  categories  Categories[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  actors      Actors[]
  directors   Directors[]
}

model Actors {
  movie   Movies  @relation(fields: [movieId], references: [id])
  movieId Int
  actor   Persons @relation(fields: [actorId], references: [id])
  actorId Int

  @@id([movieId, actorId])
  @@map("Actors")
}

model Directors {
  movie      Movies  @relation(fields: [movieId], references: [id])
  movieId    Int
  director   Persons @relation(fields: [directorId], references: [id])
  directorId Int

  @@id([movieId, directorId])
  @@map("Directors")
}

model Persons {
  id        Int         @id @default(autoincrement())
  name      String
  birthDate DateTime
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  actors    Actors[]
  directors Directors[]
}

model Categories {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  movies    Movies?  @relation(fields: [moviesId], references: [id])
  moviesId  Int?
}
